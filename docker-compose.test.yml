version: '3.8'

services:
  # Frontend for testing
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: urgent-studio-frontend-test
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=test
      - NEXT_PUBLIC_API_URL=http://backend:8080
      - DATABASE_URL=postgres://testuser:testpass@postgres:5432/testdb
    depends_on:
      postgres:
        condition: service_healthy
      backend:
        condition: service_started
    networks:
      - test-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Backend for testing
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: urgent-studio-backend-test
    ports:
      - "8080:8080"
    environment:
      - DATABASE_URL=postgres://testuser:testpass@postgres:5432/testdb
      - JWT_SECRET=test-jwt-secret-key
      - PORT=8080
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - test-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Test database
  postgres:
    image: postgres:15-alpine
    container_name: urgent-studio-postgres-test
    environment:
      POSTGRES_DB: testdb
      POSTGRES_USER: testuser
      POSTGRES_PASSWORD: testpass
    ports:
      - "5432:5432"
    volumes:
      - postgres_test_data:/var/lib/postgresql/data
      - ./backend/migrations:/docker-entrypoint-initdb.d
    networks:
      - test-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U testuser -d testdb"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Nginx for testing
  nginx:
    image: nginx:alpine
    container_name: urgent-studio-nginx-test
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.test.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - frontend
      - backend
    networks:
      - test-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_test_data:

networks:
  test-network:
    driver: bridge